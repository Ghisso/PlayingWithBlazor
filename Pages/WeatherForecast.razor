@page "/weatherforecast"
@using PlayingWithBlazor.Models
@using Newtonsoft.Json
@using System.Linq
@using System.IO
@inject HttpClient httpClient
@inject OpenWeatherForecastData OpenWeatherForecastData


<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from OpenWeather API.</p>


@if(CityList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group">
    <label>Enter your OpenWeatherMap API KEY : </label>
    <input type="text" class="form-control" @bind="@APIKey" />
    </div>

    <div class="form-group">
    <label>Enter the City : </label>
        <BlazoredTypeahead SearchMethod="@SearchCityNames"
                    @bind-Value="@SelectedCity">
            <SelectedTemplate>
                @context.Name, @context.Country
            </SelectedTemplate>
            <ResultTemplate>
                @context.Name, @context.Country
            </ResultTemplate>
        </BlazoredTypeahead>
    </div>

    <div class="form-group">
    <label>Or enter the latitude and longitude (the city takes precedence) : </label>
    <input type="text" class="form-control" @bind="@Latitude" placeholder="Latitude" />
    <input type="text" class="form-control" @bind="@Longitude" placeholder="Longitude" />
    </div>

    <div class="form-group">
    <button class="btn btn-primary" @onclick="@GetForecast">Get forecast</button>
    </div>
    <hr />

    @if(DailyForecasts.Count > 0)
    {
        <div>Weather Forecast of the next 5 days for the city of @SelectedCity.Name : </div>
        <br /> 
        @foreach (var day in DailyForecasts)
        {
            <p>Forecast for : @DateTimeOffset.FromUnixTimeSeconds(day[0].Dt).AddSeconds(forecast.City.Timezone).ToString("D")</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Local Time at @SelectedCity.Name</th>
                        <th>Temp. (C)</th>
                        <th>Summary</th>
                        <th>Icon</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var fc in day)
                    {
                        <tr>
                            <td>@DateTimeOffset.FromUnixTimeSeconds(fc.Dt).AddSeconds(forecast.City.Timezone).ToString("t")</td>
                            <td>@fc.Main.Temp</td>
                            <td>@fc.Weather[0].Description</td>
                            <td>
                                @{var iconURL = $"http://openweathermap.org/img/wn/{@fc.Weather[0].Icon}@2x.png";
                                <img src=@iconURL height=50 width=50>
                                }
                                </td>
                        </tr>
                    }
                </tbody>
            </table>  
            <br /> 
        }
    }
}

@code 
{
    private string APIKey { get; set; } = "2ad0ee5277bd2278b8086676f6752f8e";
    private double Latitude { get; set; }
    private double Longitude { get; set; }
    private OpenWeatherForecast forecast = null;
    private List<List<Summary>> DailyForecasts = new List<List<Summary>>();
    private List<City> CityList;
    private City SelectedCity;

    private async void GetForecast()
    {
        string url = $"http://api.openweathermap.org/data/2.5/forecast?id={SelectedCity.Id}&units=metric&APPID={APIKey}";
        var responseJson = await httpClient.GetStringAsync(url);
        forecast = JsonConvert.DeserializeObject<OpenWeatherForecast>(responseJson);
        var initial_day = DateTimeOffset.FromUnixTimeSeconds(forecast.List[0].Dt).AddSeconds(forecast.City.Timezone);
        DailyForecasts.Clear();
        for (int i = 0; i < 5; i++)
        {
            var dailyForecast = forecast.List.Where( x => DateTimeOffset.FromUnixTimeSeconds(x.Dt).AddSeconds(forecast.City.Timezone).Day == initial_day.AddDays(i).Day)
                                                    .ToList();
            DailyForecasts.Add(dailyForecast);
            this.StateHasChanged();
        }
    }

    protected override async Task OnInitAsync()
    {
        if(CityList == null)
        {
            CityList = await OpenWeatherForecastData.GetOpenWeatherCityList();
        }
    }

    private async Task<List<City>> SearchCityNames(string searchText)
    {
        var res = await Task.FromResult(CityList.Where(x => x.Name.ToLower().StartsWith(searchText.ToLower())).ToList());
        return res;
    }
}
